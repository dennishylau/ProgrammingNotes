{
  "title": "Ch 035P Practice: Decoding iTunes Search",
  "cells": [
    {
      "type": "text",
      "data": "<div>Requires the <code>withQueries</code> URL extension that can be found in&nbsp;<a href=\"quiver-note-url/6BE721D3-7C87-4641-B95F-68D7CEB53AE4\">Ch 035 URL Extension</a><br></div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "import UIKit\nimport PlaygroundSupport\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nstruct iTunesItem: Codable, CustomStringConvertible {\n\tlet title: String\n\tlet artworkURL: URL\n\tlet artist: String\n\tlet kind: String\n\tlet itemDescription: String\n\t// CustomStringConvertible required property, used for print(_:)\n\tvar description: String {\n\t\treturn \"title:\\(title)-kind:\\(kind)\"\n\t}\n\t\n\tenum CodingKeys: String, CodingKey {\n\t\tcase title = \"trackName\"\n\t\tcase artworkURL = \"artworkUrl60\"\n\t\tcase artist = \"artistName\"\n\t\tcase kind\n\t\tcase itemDescription = \"description\"\n\t}\n\t\n\t// AdditionalKeys needed because some items have description and some longDescription, the rest none\n\tenum AdditionalKeys: String, CodingKey {\n\t\tcase itemDescription = \"longDescription\"\n\t}\n\t\n\tinit(from decoder:Decoder) throws {\n\t\tlet valueContainer = try decoder.container(keyedBy: CodingKeys.self)\n\t\tself.title = try valueContainer.decode(String.self, forKey: .title)\n\t\tself.artworkURL = try valueContainer.decode(URL.self, forKey: .artworkURL)\n\t\tself.artist = try valueContainer.decode(String.self, forKey: .artist)\n\t\tself.kind = try valueContainer.decode(String.self, forKey: .kind)\n\t\t// Handling for AdditionalKeys, use try? in case fail will return nil, then use AdditionalKeys, fail again return \"\"\n\t\tif let itemDescription = try? valueContainer.decode(String.self, forKey: .itemDescription) {\n\t\t\tself.itemDescription = itemDescription\n\t\t} else {\n\t\t\tlet additionalValueContainer = try decoder.container(keyedBy: AdditionalKeys.self)\n\t\t\tself.itemDescription = (try? additionalValueContainer.decode(String.self, forKey: .itemDescription)) ?? \"\"\n\t\t}\n\t}\n}\n\n// This intermidiary object is needed because the wanted objects are wrapped inside a dictionary results:[iTunesItem]\nstruct StoreResults: Codable {\n\tlet results: [iTunesItem]\n}\n\nfunc fetchItunesItems(query: [String:String],completion: @escaping (StoreResults?) -> Void) {\n\tlet iTunesBaseUrl = URL(string: \"https://itunes.apple.com/search\")\n\tguard let iTunesSearchUrl = iTunesBaseUrl!.withQueries(query) else {\n\t\tcompletion(nil)\n\t\tprint(\"Invalid query\")\n\t\treturn\n\t}\n\tprint(iTunesSearchUrl)\n\t\n\tlet iTunesTask = URLSession.shared.dataTask(with: iTunesSearchUrl) { (data, response, error) in\n\t\tif let data = data {\n\t\t\tdo {\n\t\t\t\t//\t\tguard let string = String.init(data: data, encoding: .utf8) else { return }\n\t\t\t\t//\t\tprint(string)\n\t\t\t\tlet decoder = JSONDecoder()\n\t\t\t\tlet searchResultObject = try decoder.decode(StoreResults.self, from: data)\n\t\t\t\tcompletion(searchResultObject)\n\t\t\t} catch {\n\t\t\t\tprint(error.localizedDescription)\n\t\t\t\tcompletion(nil)\n\t\t\t}\n\t\t}\n\t}\n\tiTunesTask.resume()\n}\n\nvar iTunesQuery: [String:String] = [\n\t\"term\":\"Michael Jack\",\n\t\"country\":\"HK\",\n\t\"media\":\"all\"\n]\n\nfetchItunesItems(query: iTunesQuery) { (storeResults) in\n\tif let storeResults = storeResults {\n\t\tprint(storeResults.results)\n\t\tprint(\"iTunes Task Completed\")\n\t}\n\tPlaygroundPage.current.finishExecution()\n}"
    }
  ]
}